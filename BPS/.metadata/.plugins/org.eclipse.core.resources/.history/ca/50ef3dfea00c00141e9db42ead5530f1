/*
 * Copyright (c) 2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.wso2.carbon.humantask.core.engine;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.util.AXIOMUtil;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.ServiceClient;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.ConfigurationContextFactory;
import org.apache.axis2.transport.xmpp.util.XMPPConstants;
import org.apache.axis2.util.XMLPrettyPrinter;
import org.apache.openjpa.kernel.exps.CandidatePath.Traversal;
import org.apache.xmlbeans.QNameSet;
import org.apache.xmlbeans.SchemaAnnotation;
import org.apache.xmlbeans.SchemaAttributeModel;
import org.apache.xmlbeans.SchemaField;
import org.apache.xmlbeans.SchemaParticle;
import org.apache.xmlbeans.SchemaProperty;
import org.apache.xmlbeans.SchemaStringEnumEntry;
import org.apache.xmlbeans.SchemaType;
import org.apache.xmlbeans.SchemaTypeElementSequencer;
import org.apache.xmlbeans.SchemaTypeLoader;
import org.apache.xmlbeans.SchemaTypeSystem;
import org.apache.xmlbeans.StringEnumAbstractBase;
import org.apache.xmlbeans.XmlAnySimpleType;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlOptions;
import org.apache.xmlbeans.SchemaType.Ref;
import org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl;
import org.hibernate.hql.ast.util.NodeTraverser;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;
import org.w3c.dom.traversal.TreeWalker;
import org.wso2.carbon.bpel.common.WSDLAwareMessage;
import org.wso2.carbon.humantask.TPresentationElements;
import org.wso2.carbon.humantask.TPresentationParameter;
import org.wso2.carbon.humantask.TPresentationParameters;
import org.wso2.carbon.humantask.client.api.types.TRendering;
import org.wso2.carbon.humantask.core.api.scheduler.Scheduler;
import org.wso2.carbon.humantask.core.configuration.HumanTaskServerConfiguration;
import org.wso2.carbon.humantask.core.dao.HumanTaskDAOConnectionFactory;
import org.wso2.carbon.humantask.core.dao.MessageDAO;
import org.wso2.carbon.humantask.core.dao.TaskCreationContext;
import org.wso2.carbon.humantask.core.dao.TaskDAO;
import org.wso2.carbon.humantask.core.deployment.config.HTDeploymentConfigDocument;
import org.wso2.carbon.humantask.core.deployment.config.TPublish;
import org.wso2.carbon.humantask.core.deployment.config.impl.HTDeploymentConfigDocumentImpl;
import org.wso2.carbon.humantask.core.deployment.config.impl.TPublishImpl;
import org.wso2.carbon.humantask.core.engine.event.processor.EventProcessor;
import org.wso2.carbon.humantask.core.engine.runtime.api.ExpressionLanguageRuntime;
import org.wso2.carbon.humantask.core.engine.runtime.xpath.XPathExpressionRuntime;
import org.wso2.carbon.humantask.core.internal.HumanTaskServiceComponent;
import org.wso2.carbon.humantask.core.store.HumanTaskBaseConfiguration;
import org.wso2.carbon.humantask.core.store.HumanTaskStore;
import org.wso2.carbon.humantask.server.config.THumanTaskServerConfig;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * The human task engine. The responsibility of this class is to invoke task
 * creation logic.
 */
public class HumanTaskEngine {
	/**
	 * The DAO connection factory as an abstraction to the underlying
	 * persistence implementation
	 */
	private HumanTaskDAOConnectionFactory daoConnectionFactory;

	/**
	 * The people query evaluator
	 */
	private PeopleQueryEvaluator peopleQueryEvaluator;

	/** The expression */
	private Map<String, ExpressionLanguageRuntime> expressionLanguageRuntimeRegistry;

	/** */
	private EventProcessor eventProcessor;

	/**
	 * Deadline scheduler
	 */
	private Scheduler scheduler;

	public HumanTaskEngine() {
		initExpressionLanguageRuntimes();
	}

	private void initExpressionLanguageRuntimes() {
		expressionLanguageRuntimeRegistry = new HashMap<String, ExpressionLanguageRuntime>();
		expressionLanguageRuntimeRegistry.put(XPathExpressionRuntime.ns,
				new XPathExpressionRuntime());
	}

	// create task logic.
	private TaskDAO createTask(WSDLAwareMessage message,
			HumanTaskBaseConfiguration taskConfiguration, int tenantId)
			throws HumanTaskException {

		TaskCreationContext creationContext = new TaskCreationContext();
		creationContext.setTaskConfiguration(taskConfiguration);
		creationContext.setTenantId(tenantId);
		creationContext.setMessageBodyParts(message.getBodyPartElements());
		creationContext.setMessageHeaderParts(message.getHeaderPartElements());
		creationContext.setPeopleQueryEvaluator(peopleQueryEvaluator);

		ServiceClient serviceClient = null;
		try {
			serviceClient = new ServiceClient();

			Options options = serviceClient.getOptions();

			EndpointReference targetEPR = new EndpointReference(
					"mailto:faathima@wso2.com");
			options.setTo(targetEPR);
			options.setProperty("subject", "This is subject");
			options.setProperty("messageType", "text/html");
			options.setProperty("ContentType", "text/html");
			options.setProperty("FORCE_SC_ACCEPTED", "true");
			options.setProperty(Constants.Configuration.MESSAGE_TYPE,
					"text/html");

			try {
				org.wso2.carbon.humantask.TPresentationParameter tr = org.wso2.carbon.humantask.TPresentationParameter.Factory
						.parse(taskConfiguration.getHumanTaskDefinitionFile());
				System.out.println(tr.getType());
				System.out.print(tr.getDomNode().getNodeValue());
			} catch (XmlException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			TPresentationElements tPresentationElements = taskConfiguration
					.getPresentationElements();
			TPresentationParameters t = tPresentationElements
					.getPresentationParameters();
			TPresentationParameter ts = t.getPresentationParameterArray(0);
			Node g = ts.getDomNode();
			/*
			 * OMElement documentElement =
			 * AXIOMUtil.stringToOM("<h1>The task is a "
			 * +taskConfiguration.getConfigurationType().toString() +
			 * " The Element value is :"+ts.xmlText() +
			 * " The other value is :"+g.getNodeValue() + "</h1>");
			 */
			StringBuilder sm = new StringBuilder("<h1>");
			Map<String, Element> map = message.getBodyPartElements();
			Object[] set = map.keySet().toArray();
			NodeList n = map.get(set[0]).getChildNodes();
			try {
				TPublish tp = TPublish.Factory.parse(new File(
						"src/main/resources/schemas/hi-config.xsd"));
				System.out.print(tp.getDomNode().getTextContent());
			} catch (XmlException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			for (int i = 0; i < n.getLength(); i++) {
				if (n.item(i).getLocalName() != null)
					sm.append(n.item(i).getLocalName() + " : "
							+ n.item(i).getTextContent());
			}
			sm.append("</h1>");
			// sm.append("<h1> text "+map.get(set[0]).getAttribute(ts.getName())+" is "+map.get(set[0]).getChildNodes().getLength()+"</h1>");

			System.out.print(sm);
			/*
			 * OMElement documentElement =
			 * AXIOMUtil.stringToOM("<h1>The task is a "
			 * +taskConfiguration.getConfigurationType().toString() +
			 * " The Element value is :"+ts.xmlText() +
			 * " The other value is :"+g.getNodeValue() + "</h1>");
			 */
			serviceClient.fireAndForget(AXIOMUtil.stringToOM(sm.toString()));

		} catch (AxisFault e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XMLStreamException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return getDaoConnectionFactory().getConnection().createTask(
				creationContext);
	}

//////////////IM/////////////////
private static void invokeTimeService() {
	String endPointUrl = "xmpp://msf.fayaza89@gmail.com/" + "TimeService";
	 
	EndpointReference targetEPR = new EndpointReference(endPointUrl);
	try {
	ConfigurationContext ctx =
	ConfigurationContextFactory.createConfigurationContextFromURIs(
	HumanTaskEngine.class.getResource("axis2.xml"), null);
	 
	OMElement payload = getPayload();
	Options options = new Options();
	options.setProperty(XMPPConstants.XMPP_SERVER_TYPE, XMPPConstants.XMPP_SERVER_TYPE_GOOGLETALK);
	options.setProperty(XMPPConstants.XMPP_SERVER_URL, XMPPConstants.GOOGLETALK_URL);
	options.setProperty(XMPPConstants.XMPP_SERVER_USERNAME, "synapse.demo.0");
	options.setProperty(XMPPConstants.XMPP_SERVER_PASSWORD, "mailpassword");
	 
	options.setTo(targetEPR);
	options.setAction("urn:getServerTime");
	ServiceClient sender = new ServiceClient(ctx,null);
	 
	sender.setOptions(options);
	OMElement result = sender.sendReceive(payload);
	XMLPrettyPrinter.prettify(result, System.out);
	} catch (Exception e) {
	e.printStackTrace();
	}
	}
	 
	private static OMElement getPayload() {
	OMFactory fac = OMAbstractFactory.getOMFactory();
	OMNamespace omNs = fac.createOMNamespace(
	"http://example.xmpp.transports.axis2.org/example1", "example1");
	return fac.createOMElement("getServerTime", omNs);
	}
	

	
	
	/**
	 * The invoke method called when the
	 * {@link org.wso2.carbon.humantask.core.integration.AxisHumanTaskMessageReceiver}
	 * is called for task creation .
	 * 
	 * @param message
	 *            : The wsdl message containing the task creation logic.
	 * @return : The task ID.
	 * @throws HumanTaskException
	 *             : If the task creation fails.
	 */
	public String invoke(final WSDLAwareMessage message,
			final HumanTaskBaseConfiguration taskConfiguration)
			throws Exception {
		TaskDAO task = scheduler.execTransaction(new Callable<TaskDAO>() {
			public TaskDAO call() throws Exception {
				HumanTaskStore taskStore = HumanTaskServiceComponent
						.getHumanTaskServer().getTaskStoreManager()
						.getHumanTaskStore(message.getTenantId());
				// return createTask(message,
				// taskStore.getTaskConfiguration(message.getPortTypeName(),
				// message.getOperationName()),
				// message.getTenantId());
				return createTask(message, taskConfiguration,
						message.getTenantId());
			}
		});

		return task.getId().toString();
	}

	/**
	 * @return : The {@link HumanTaskDAOConnectionFactory}
	 */
	public HumanTaskDAOConnectionFactory getDaoConnectionFactory() {
		return daoConnectionFactory;
	}

	/**
	 * @param daoConnectionFactory
	 *            : The DAO Connection Factory.
	 */
	public void setDaoConnectionFactory(
			HumanTaskDAOConnectionFactory daoConnectionFactory) {
		this.daoConnectionFactory = daoConnectionFactory;
	}

	/**
	 * @param pqe
	 *            : The people query evaluator to set.
	 */
	public void setPeopleQueryEvaluator(PeopleQueryEvaluator pqe) {
		this.peopleQueryEvaluator = pqe;
	}

	/**
	 * @return : The people query evaluator for people evaluations.
	 */
	public PeopleQueryEvaluator getPeopleQueryEvaluator() {
		return peopleQueryEvaluator;
	}

	/**
	 * @param language
	 *            : The required type of the expression language.
	 * @return : The ExpressionLanguageRuntime object.
	 */
	public ExpressionLanguageRuntime getExpressionLanguageRuntime(
			String language) {
		ExpressionLanguageRuntime epxLanguageRuntime = null;
		if (expressionLanguageRuntimeRegistry != null) {
			epxLanguageRuntime = expressionLanguageRuntimeRegistry
					.get(language);
		}
		return epxLanguageRuntime;
	}

	/**
	 * @return : The scheduler:
	 */
	public Scheduler getScheduler() {
		return scheduler;
	}

	/**
	 * @param scheduler
	 *            : The Scheduler object to set.
	 */
	public void setScheduler(Scheduler scheduler) {
		this.scheduler = scheduler;
	}

	/**
	 * 
	 * @param eventProcessor
	 */
	public void setEventProcessor(EventProcessor eventProcessor) {
		this.eventProcessor = eventProcessor;
	}

	/**
	 * 
	 * @return
	 */
	public EventProcessor getEventProcessor() {
		return this.eventProcessor;
	}

}