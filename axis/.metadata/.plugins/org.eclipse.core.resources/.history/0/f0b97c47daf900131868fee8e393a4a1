package com.orderprocessing;

import java.rmi.RemoteException;

import com.orderProcessing.OrderItem;

public class ADBclient {

		public static void main(String[] args) throws RemoteException {
			OrderProcessingServiceStub Stub = new OrderProcessingServiceStub();

			// Create stub items for a order
			OrderProcessingServiceStub.OrderItem item1 = createItem(1,"car",1,(float) 5.0);
			OrderProcessingServiceStub.OrderItem item2 = createItem(2,"bus", 4,(float) 8.0);
			OrderProcessingServiceStub.OrderItem itemList[] = { item1,item2 };

			// Create stub Order
			OrderProcessingServiceStub.Order order = createOrder(1,"2010-01-12", itemList);

			// Create an order request
			OrderProcessingServiceStub.CreateOrder createOrderRequest = new OrderProcessingServiceStub.CreateOrder();
			createOrderRequest.setArgs0(order);

			// Place the order and get the response
			OrderProcessingServiceStub.CreateOrderResponse createOrderResponse = Stub
					.createOrder(createOrderRequest);
			if (createOrderResponse.get_return()) {
				System.out.println("Successfully Created Order " + order.getOrderid());
			} else {
				System.err.println("Invalid Order Id. (Order Id already exists)");
				return;
			}

			// Preparing Get Order request for order id "1"
			int requestOrderId = 1;
			OrderProcessingServiceStub.ViewOrder getOrderRequest = new OrderProcessingServiceStub.ViewOrder();
			getOrderRequest.setArgs0(requestOrderId);

			// Get the order
			OrderProcessingServiceStub.ViewOrderResponse getOrderResponse = Stub.viewOrder(getOrderRequest);
			order = getOrderResponse.get_return();

			System.out.println("Results from get order request for Order ID: "
					+ requestOrderId);
			if (!(order == null)) {
				printOrder(order);
			} else {
				System.err.println("Invalid Order Id");
			}

			// Request for total cost of order id @requestOrderId
			OrderProcessingServiceStub.ViewOrderCost getOrderCostRequest = new OrderProcessingServiceStub.ViewOrderCost();
			getOrderCostRequest.setArgs0(requestOrderId);

			OrderProcessingServiceStub.ViewOrderCostResponse getOrderCostResponse = Stub.viewOrderCost(getOrderCostRequest);
					

			System.out.println("Total Cost for Order Id " + requestOrderId + " :"
					+ getOrderCostResponse.get_return());

		}
		
		public static OrderProcessingServiceStub.OrderItem createItem(int itemId, String itemName, int quantity, float unitPrize) {
			OrderProcessingServiceStub.OrderItem item = new OrderProcessingServiceStub.OrderItem();
			item.setItemId(itemId);
			
			item.setQuantity(quantity);
			item.setUnitPrice(unitPrize);
			return item;
		}

		public static OrderProcessingServiceStub.Order createOrder(int orderId,
				String date, OrderProcessingServiceStub.OrderItem[] items) {
			OrderProcessingServiceStub.Order order = new OrderProcessingServiceStub.Order();
			order.setOrderid(orderId);
			order.setCustomerName(name);
			order.setItems(items);
			return order;
		}

		public static void printItem(
				OrderProcessingServiceStub.OrderItem item) {
			System.out.println("\tItem id: " + item.getItemId());
			System.out.println("\tQuantity: " + item.getQuantity());
			System.out.println("\tUnit price: " + item.getUnitPrice());
		}
		
		public static void printOrder(OrderProcessingServiceStub.Order order) {
			System.out.println("Order id: " + order.getOrderid()());
			System.out.println("Date: " + order.getCustomerName()());
			System.out.println("Items");
			OrderItem itemList[] = order.getItems();
			for (OrderItem item : itemList) {
				viewItem(item);
				System.out.println();
			}

		}

	}

